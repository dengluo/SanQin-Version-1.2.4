package com.pbids.sanqin.model.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_MESSAGE".
*/
public class SystemMessageDao extends AbstractDao<SystemMessage, Long> {

    public static final String TABLENAME = "SYSTEM_MESSAGE";

    /**
     * Properties of entity SystemMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property SessionType = new Property(2, int.class, "sessionType", false, "SESSION_TYPE");
        public final static Property FromAccount = new Property(3, String.class, "fromAccount", false, "FROM_ACCOUNT");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Msgtype = new Property(7, int.class, "msgtype", false, "MSGTYPE");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Isread = new Property(9, boolean.class, "isread", false, "ISREAD");
        public final static Property Url = new Property(10, String.class, "url", false, "URL");
        public final static Property Topic = new Property(11, String.class, "topic", false, "TOPIC");
        public final static Property Icon = new Property(12, String.class, "icon", false, "ICON");
        public final static Property SubTitle = new Property(13, String.class, "subTitle", false, "SUB_TITLE");
        public final static Property Uid = new Property(14, Long.class, "uid", false, "UID");
        public final static Property Surname = new Property(15, String.class, "surname", false, "SURNAME");
        public final static Property Tags = new Property(16, String.class, "tags", false, "TAGS");
        public final static Property SurnameIcon = new Property(17, String.class, "surnameIcon", false, "SURNAME_ICON");
    }


    public SystemMessageDao(DaoConfig config) {
        super(config);
    }
    
    public SystemMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SESSION_ID\" TEXT," + // 1: sessionId
                "\"SESSION_TYPE\" INTEGER NOT NULL ," + // 2: sessionType
                "\"FROM_ACCOUNT\" TEXT," + // 3: fromAccount
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"TITLE\" TEXT," + // 5: title
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"MSGTYPE\" INTEGER NOT NULL ," + // 7: msgtype
                "\"CONTENT\" TEXT," + // 8: content
                "\"ISREAD\" INTEGER NOT NULL ," + // 9: isread
                "\"URL\" TEXT," + // 10: url
                "\"TOPIC\" TEXT," + // 11: topic
                "\"ICON\" TEXT," + // 12: icon
                "\"SUB_TITLE\" TEXT," + // 13: subTitle
                "\"UID\" INTEGER," + // 14: uid
                "\"SURNAME\" TEXT," + // 15: surname
                "\"TAGS\" TEXT," + // 16: tags
                "\"SURNAME_ICON\" TEXT);"); // 17: surnameIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
        stmt.bindLong(3, entity.getSessionType());
 
        String fromAccount = entity.getFromAccount();
        if (fromAccount != null) {
            stmt.bindString(4, fromAccount);
        }
        stmt.bindLong(5, entity.getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getMsgtype());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getIsread() ? 1L: 0L);
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(12, topic);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(14, subTitle);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(15, uid);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(16, surname);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(17, tags);
        }
 
        String surnameIcon = entity.getSurnameIcon();
        if (surnameIcon != null) {
            stmt.bindString(18, surnameIcon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
        stmt.bindLong(3, entity.getSessionType());
 
        String fromAccount = entity.getFromAccount();
        if (fromAccount != null) {
            stmt.bindString(4, fromAccount);
        }
        stmt.bindLong(5, entity.getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getMsgtype());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getIsread() ? 1L: 0L);
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(12, topic);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(14, subTitle);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(15, uid);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(16, surname);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(17, tags);
        }
 
        String surnameIcon = entity.getSurnameIcon();
        if (surnameIcon != null) {
            stmt.bindString(18, surnameIcon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SystemMessage readEntity(Cursor cursor, int offset) {
        SystemMessage entity = new SystemMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.getInt(offset + 2), // sessionType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromAccount
            cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7), // msgtype
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.getShort(offset + 9) != 0, // isread
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // topic
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // icon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // subTitle
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // uid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // surname
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tags
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // surnameIcon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemMessage entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSessionType(cursor.getInt(offset + 2));
        entity.setFromAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setMsgtype(cursor.getInt(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsread(cursor.getShort(offset + 9) != 0);
        entity.setUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTopic(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIcon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubTitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUid(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setSurname(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTags(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSurnameIcon(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemMessage entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemMessage entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemMessage entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
