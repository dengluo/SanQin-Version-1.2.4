package com.pbids.sanqin.model.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property CreateTime = new Property(1, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property FaceUrl = new Property(3, String.class, "faceUrl", false, "FACE_URL");
        public final static Property UserId = new Property(4, long.class, "userId", false, "USER_ID");
        public final static Property LoginIP = new Property(5, String.class, "loginIP", false, "LOGIN_IP");
        public final static Property LoginTime = new Property(6, long.class, "loginTime", false, "LOGIN_TIME");
        public final static Property NewGiftCount = new Property(7, int.class, "newGiftCount", false, "NEW_GIFT_COUNT");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property QuickResponseCode = new Property(10, String.class, "quickResponseCode", false, "QUICK_RESPONSE_CODE");
        public final static Property Rank = new Property(11, int.class, "rank", false, "RANK");
        public final static Property Sex = new Property(12, String.class, "sex", false, "SEX");
        public final static Property State = new Property(13, int.class, "state", false, "STATE");
        public final static Property Token = new Property(14, String.class, "token", false, "TOKEN");
        public final static Property Name = new Property(15, String.class, "name", false, "NAME");
        public final static Property Signature = new Property(16, String.class, "signature", false, "SIGNATURE");
        public final static Property Location = new Property(17, String.class, "location", false, "LOCATION");
        public final static Property LocationId = new Property(18, String.class, "locationId", false, "LOCATION_ID");
        public final static Property NativePlace = new Property(19, String.class, "nativePlace", false, "NATIVE_PLACE");
        public final static Property NativePlaceId = new Property(20, String.class, "nativePlaceId", false, "NATIVE_PLACE_ID");
        public final static Property AccountBalance = new Property(21, float.class, "accountBalance", false, "ACCOUNT_BALANCE");
        public final static Property Surname = new Property(22, String.class, "surname", false, "SURNAME");
        public final static Property NoticeSurnames = new Property(23, String.class, "noticeSurnames", false, "NOTICE_SURNAMES");
        public final static Property SurnameStatus = new Property(24, int.class, "surnameStatus", false, "SURNAME_STATUS");
        public final static Property SurnameId = new Property(25, int.class, "surnameId", false, "SURNAME_ID");
        public final static Property Level = new Property(26, int.class, "Level", false, "LEVEL");
        public final static Property Empiric = new Property(27, int.class, "empiric", false, "EMPIRIC");
        public final static Property LevelName = new Property(28, String.class, "levelName", false, "LEVEL_NAME");
        public final static Property UpgradeEx = new Property(29, int.class, "upgradeEx", false, "UPGRADE_EX");
        public final static Property Vip = new Property(30, int.class, "vip", false, "VIP");
        public final static Property NoticeSurnameIds = new Property(31, String.class, "noticeSurnameIds", false, "NOTICE_SURNAME_IDS");
        public final static Property IsBindCard = new Property(32, int.class, "isBindCard", false, "IS_BIND_CARD");
        public final static Property IsSetPayword = new Property(33, int.class, "isSetPayword", false, "IS_SET_PAYWORD");
        public final static Property IdNumber = new Property(34, String.class, "idNumber", false, "ID_NUMBER");
        public final static Property IsRealName = new Property(35, int.class, "isRealName", false, "IS_REAL_NAME");
        public final static Property CardNumber = new Property(36, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property SignDays = new Property(37, String.class, "signDays", false, "SIGN_DAYS");
        public final static Property BrickCount = new Property(38, int.class, "brickCount", false, "BRICK_COUNT");
        public final static Property GiftBrickCount = new Property(39, int.class, "giftBrickCount", false, "GIFT_BRICK_COUNT");
        public final static Property ActivityBrickCount = new Property(40, int.class, "activityBrickCount", false, "ACTIVITY_BRICK_COUNT");
        public final static Property CurrentEmpiric = new Property(41, int.class, "currentEmpiric", false, "CURRENT_EMPIRIC");
        public final static Property ClanStatus = new Property(42, int.class, "clanStatus", false, "CLAN_STATUS");
        public final static Property DeviceId = new Property(43, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Reid = new Property(44, int.class, "reid", false, "REID");
        public final static Property NickName = new Property(45, String.class, "nickName", false, "NICK_NAME");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 1: createTime
                "\"EMAIL\" TEXT," + // 2: email
                "\"FACE_URL\" TEXT," + // 3: faceUrl
                "\"USER_ID\" INTEGER NOT NULL ," + // 4: userId
                "\"LOGIN_IP\" TEXT," + // 5: loginIP
                "\"LOGIN_TIME\" INTEGER NOT NULL ," + // 6: loginTime
                "\"NEW_GIFT_COUNT\" INTEGER NOT NULL ," + // 7: newGiftCount
                "\"PASSWORD\" TEXT," + // 8: password
                "\"PHONE\" TEXT," + // 9: phone
                "\"QUICK_RESPONSE_CODE\" TEXT," + // 10: quickResponseCode
                "\"RANK\" INTEGER NOT NULL ," + // 11: rank
                "\"SEX\" TEXT," + // 12: sex
                "\"STATE\" INTEGER NOT NULL ," + // 13: state
                "\"TOKEN\" TEXT," + // 14: token
                "\"NAME\" TEXT," + // 15: name
                "\"SIGNATURE\" TEXT," + // 16: signature
                "\"LOCATION\" TEXT," + // 17: location
                "\"LOCATION_ID\" TEXT," + // 18: locationId
                "\"NATIVE_PLACE\" TEXT," + // 19: nativePlace
                "\"NATIVE_PLACE_ID\" TEXT," + // 20: nativePlaceId
                "\"ACCOUNT_BALANCE\" REAL NOT NULL ," + // 21: accountBalance
                "\"SURNAME\" TEXT," + // 22: surname
                "\"NOTICE_SURNAMES\" TEXT," + // 23: noticeSurnames
                "\"SURNAME_STATUS\" INTEGER NOT NULL ," + // 24: surnameStatus
                "\"SURNAME_ID\" INTEGER NOT NULL ," + // 25: surnameId
                "\"LEVEL\" INTEGER NOT NULL ," + // 26: Level
                "\"EMPIRIC\" INTEGER NOT NULL ," + // 27: empiric
                "\"LEVEL_NAME\" TEXT," + // 28: levelName
                "\"UPGRADE_EX\" INTEGER NOT NULL ," + // 29: upgradeEx
                "\"VIP\" INTEGER NOT NULL ," + // 30: vip
                "\"NOTICE_SURNAME_IDS\" TEXT," + // 31: noticeSurnameIds
                "\"IS_BIND_CARD\" INTEGER NOT NULL ," + // 32: isBindCard
                "\"IS_SET_PAYWORD\" INTEGER NOT NULL ," + // 33: isSetPayword
                "\"ID_NUMBER\" TEXT," + // 34: idNumber
                "\"IS_REAL_NAME\" INTEGER NOT NULL ," + // 35: isRealName
                "\"CARD_NUMBER\" TEXT," + // 36: cardNumber
                "\"SIGN_DAYS\" TEXT," + // 37: signDays
                "\"BRICK_COUNT\" INTEGER NOT NULL ," + // 38: brickCount
                "\"GIFT_BRICK_COUNT\" INTEGER NOT NULL ," + // 39: giftBrickCount
                "\"ACTIVITY_BRICK_COUNT\" INTEGER NOT NULL ," + // 40: activityBrickCount
                "\"CURRENT_EMPIRIC\" INTEGER NOT NULL ," + // 41: currentEmpiric
                "\"CLAN_STATUS\" INTEGER NOT NULL ," + // 42: clanStatus
                "\"DEVICE_ID\" TEXT," + // 43: deviceId
                "\"REID\" INTEGER NOT NULL ," + // 44: reid
                "\"NICK_NAME\" TEXT);"); // 45: nickName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCreateTime());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String faceUrl = entity.getFaceUrl();
        if (faceUrl != null) {
            stmt.bindString(4, faceUrl);
        }
        stmt.bindLong(5, entity.getUserId());
 
        String loginIP = entity.getLoginIP();
        if (loginIP != null) {
            stmt.bindString(6, loginIP);
        }
        stmt.bindLong(7, entity.getLoginTime());
        stmt.bindLong(8, entity.getNewGiftCount());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String quickResponseCode = entity.getQuickResponseCode();
        if (quickResponseCode != null) {
            stmt.bindString(11, quickResponseCode);
        }
        stmt.bindLong(12, entity.getRank());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(13, sex);
        }
        stmt.bindLong(14, entity.getState());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(17, signature);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(18, location);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(19, locationId);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(20, nativePlace);
        }
 
        String nativePlaceId = entity.getNativePlaceId();
        if (nativePlaceId != null) {
            stmt.bindString(21, nativePlaceId);
        }
        stmt.bindDouble(22, entity.getAccountBalance());
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(23, surname);
        }
 
        String noticeSurnames = entity.getNoticeSurnames();
        if (noticeSurnames != null) {
            stmt.bindString(24, noticeSurnames);
        }
        stmt.bindLong(25, entity.getSurnameStatus());
        stmt.bindLong(26, entity.getSurnameId());
        stmt.bindLong(27, entity.getLevel());
        stmt.bindLong(28, entity.getEmpiric());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(29, levelName);
        }
        stmt.bindLong(30, entity.getUpgradeEx());
        stmt.bindLong(31, entity.getVip());
 
        String noticeSurnameIds = entity.getNoticeSurnameIds();
        if (noticeSurnameIds != null) {
            stmt.bindString(32, noticeSurnameIds);
        }
        stmt.bindLong(33, entity.getIsBindCard());
        stmt.bindLong(34, entity.getIsSetPayword());
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(35, idNumber);
        }
        stmt.bindLong(36, entity.getIsRealName());
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(37, cardNumber);
        }
 
        String signDays = entity.getSignDays();
        if (signDays != null) {
            stmt.bindString(38, signDays);
        }
        stmt.bindLong(39, entity.getBrickCount());
        stmt.bindLong(40, entity.getGiftBrickCount());
        stmt.bindLong(41, entity.getActivityBrickCount());
        stmt.bindLong(42, entity.getCurrentEmpiric());
        stmt.bindLong(43, entity.getClanStatus());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(44, deviceId);
        }
        stmt.bindLong(45, entity.getReid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(46, nickName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCreateTime());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String faceUrl = entity.getFaceUrl();
        if (faceUrl != null) {
            stmt.bindString(4, faceUrl);
        }
        stmt.bindLong(5, entity.getUserId());
 
        String loginIP = entity.getLoginIP();
        if (loginIP != null) {
            stmt.bindString(6, loginIP);
        }
        stmt.bindLong(7, entity.getLoginTime());
        stmt.bindLong(8, entity.getNewGiftCount());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String quickResponseCode = entity.getQuickResponseCode();
        if (quickResponseCode != null) {
            stmt.bindString(11, quickResponseCode);
        }
        stmt.bindLong(12, entity.getRank());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(13, sex);
        }
        stmt.bindLong(14, entity.getState());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(17, signature);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(18, location);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(19, locationId);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(20, nativePlace);
        }
 
        String nativePlaceId = entity.getNativePlaceId();
        if (nativePlaceId != null) {
            stmt.bindString(21, nativePlaceId);
        }
        stmt.bindDouble(22, entity.getAccountBalance());
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(23, surname);
        }
 
        String noticeSurnames = entity.getNoticeSurnames();
        if (noticeSurnames != null) {
            stmt.bindString(24, noticeSurnames);
        }
        stmt.bindLong(25, entity.getSurnameStatus());
        stmt.bindLong(26, entity.getSurnameId());
        stmt.bindLong(27, entity.getLevel());
        stmt.bindLong(28, entity.getEmpiric());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(29, levelName);
        }
        stmt.bindLong(30, entity.getUpgradeEx());
        stmt.bindLong(31, entity.getVip());
 
        String noticeSurnameIds = entity.getNoticeSurnameIds();
        if (noticeSurnameIds != null) {
            stmt.bindString(32, noticeSurnameIds);
        }
        stmt.bindLong(33, entity.getIsBindCard());
        stmt.bindLong(34, entity.getIsSetPayword());
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(35, idNumber);
        }
        stmt.bindLong(36, entity.getIsRealName());
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(37, cardNumber);
        }
 
        String signDays = entity.getSignDays();
        if (signDays != null) {
            stmt.bindString(38, signDays);
        }
        stmt.bindLong(39, entity.getBrickCount());
        stmt.bindLong(40, entity.getGiftBrickCount());
        stmt.bindLong(41, entity.getActivityBrickCount());
        stmt.bindLong(42, entity.getCurrentEmpiric());
        stmt.bindLong(43, entity.getClanStatus());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(44, deviceId);
        }
        stmt.bindLong(45, entity.getReid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(46, nickName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // faceUrl
            cursor.getLong(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // loginIP
            cursor.getLong(offset + 6), // loginTime
            cursor.getInt(offset + 7), // newGiftCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // quickResponseCode
            cursor.getInt(offset + 11), // rank
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sex
            cursor.getInt(offset + 13), // state
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // token
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // signature
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // location
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // locationId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nativePlace
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // nativePlaceId
            cursor.getFloat(offset + 21), // accountBalance
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // surname
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // noticeSurnames
            cursor.getInt(offset + 24), // surnameStatus
            cursor.getInt(offset + 25), // surnameId
            cursor.getInt(offset + 26), // Level
            cursor.getInt(offset + 27), // empiric
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // levelName
            cursor.getInt(offset + 29), // upgradeEx
            cursor.getInt(offset + 30), // vip
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // noticeSurnameIds
            cursor.getInt(offset + 32), // isBindCard
            cursor.getInt(offset + 33), // isSetPayword
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // idNumber
            cursor.getInt(offset + 35), // isRealName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // cardNumber
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // signDays
            cursor.getInt(offset + 38), // brickCount
            cursor.getInt(offset + 39), // giftBrickCount
            cursor.getInt(offset + 40), // activityBrickCount
            cursor.getInt(offset + 41), // currentEmpiric
            cursor.getInt(offset + 42), // clanStatus
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // deviceId
            cursor.getInt(offset + 44), // reid
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45) // nickName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.getLong(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFaceUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.getLong(offset + 4));
        entity.setLoginIP(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLoginTime(cursor.getLong(offset + 6));
        entity.setNewGiftCount(cursor.getInt(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQuickResponseCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRank(cursor.getInt(offset + 11));
        entity.setSex(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setState(cursor.getInt(offset + 13));
        entity.setToken(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSignature(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLocation(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLocationId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNativePlace(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNativePlaceId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAccountBalance(cursor.getFloat(offset + 21));
        entity.setSurname(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setNoticeSurnames(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSurnameStatus(cursor.getInt(offset + 24));
        entity.setSurnameId(cursor.getInt(offset + 25));
        entity.setLevel(cursor.getInt(offset + 26));
        entity.setEmpiric(cursor.getInt(offset + 27));
        entity.setLevelName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUpgradeEx(cursor.getInt(offset + 29));
        entity.setVip(cursor.getInt(offset + 30));
        entity.setNoticeSurnameIds(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setIsBindCard(cursor.getInt(offset + 32));
        entity.setIsSetPayword(cursor.getInt(offset + 33));
        entity.setIdNumber(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setIsRealName(cursor.getInt(offset + 35));
        entity.setCardNumber(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSignDays(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setBrickCount(cursor.getInt(offset + 38));
        entity.setGiftBrickCount(cursor.getInt(offset + 39));
        entity.setActivityBrickCount(cursor.getInt(offset + 40));
        entity.setCurrentEmpiric(cursor.getInt(offset + 41));
        entity.setClanStatus(cursor.getInt(offset + 42));
        entity.setDeviceId(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setReid(cursor.getInt(offset + 44));
        entity.setNickName(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
